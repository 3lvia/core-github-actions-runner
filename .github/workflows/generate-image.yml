name: Generate image

# TODO: add cron trigger
on:
  push:
    branches: [master, develop]
    paths-ignore: ['README.md', '.github/renovate.json']

jobs:
  generate-packer-image:
    name: 'Generate Packer image'
    runs-on: ${{ github.head_ref == 'master' || github.ref_name == 'master' && 'elvia-runner' || 'elvia-runner-dev' }}
    environment: ${{ github.head_ref == 'master' || github.ref_name == 'master' && 'prod' || 'dev' }}
    outputs:
      image_name: ${{ steps.set-env.outputs.image_name }}
    steps:
    - name: Clone runner images repository
      uses: actions/checkout@v4
      with:
        repository: 'actions/runner-images'

    - name: Setup Packer
      uses: hashicorp/setup-packer@v3

    - name: Set environment variables and output
      id: set-env
      run: |
        echo "image_name=github-runner-$(date +%s)" >> "$GITHUB_OUTPUT"
        echo "TEMP_RESOURCE_GROUP_NAME=packer-build-delete-me-$RANDOM$RANDOM" >> "$GITHUB_ENV"

    - name: Build image and publish to Azure
      run: |
        packer init "$IMAGE_TEMPLATE"
        packer build \
          -var 'managed_image_name=${{ env.IMAGE_NAME}}' \
          -var 'temp_resource_group_name=${{ env.TEMP_RESOURCE_GROUP_NAME }}' \
          "$IMAGE_TEMPLATE"
      env:
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_RESOURCE_GROUP: ${{ vars.ARM_RESOURCE_GROUP }}
        ARM_RESOURCE_LOCATION: ${{ vars.ARM_RESOURCE_LOCATION }}
        IMAGE_TEMPLATE: './images/ubuntu/templates/ubuntu-22.04.pkr.hcl'

  update-vmss:
    name: 'Update VMSS with new image'
    runs-on: ubuntu-latest # DON'T USE ELVIA RUNNER! THIS WILL CANCEL THE JOB
    environment: ${{ github.head_ref == 'master' || github.ref_name == 'master' && 'prod' || 'dev' }}
    needs: [generate-packer-image]
    steps:
    - name: Login to Azure CLI
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

    - name: Update VMSS with new image
      run: |
        image_id=$(az image show -g '${{ vars.ARM_RESOURCE_GROUP }}' -n '${{ needs.generate-packer-image.outputs.image_name }}' --query id -o tsv)
        az vmss update \
          --output none \
          --resource-group '${{ vars.ARM_RESOURCE_GROUP }}' \
          --name '${{ vars.VMSS_NAME }}' \
          --set virtualMachineProfile.storageProfile.imageReference.id="$image_id"
