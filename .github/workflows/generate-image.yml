name: Generate image

on:
  push:
    branches: [trunk]
    paths:
      - 'runner-images/**'
      - 'install-scripts/**'
      - '.github/workflows/generate-image.yml'
  pull_request:
    branches: [trunk]
    paths:
      - 'runner-images/**'
      - 'install-scripts/**'
      - '.github/workflows/generate-image.yml'

env:
  IMAGE_TEMPLATE: './runner-images/images/ubuntu/templates/ubuntu-22.04.pkr.hcl'

concurrency:
  group: 'generate-image-${{ github.event_name }}'

jobs:
  generate-packer-image:
    name: 'Generate Packer image'
    runs-on: ubuntu-latest # We don't use Elvia runner to avoid race conditions
    environment: ${{ github.event_name == 'push' && 'prod' || 'dev' }}
    outputs:
      image_name: ${{ steps.set-env.outputs.image_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@v3

      - name: Set environment variables and outputs
        id: set-env
        run: |
          echo "image_name=elvia-runner-$(date +%s)" >> "$GITHUB_OUTPUT"
          echo "TEMP_RESOURCE_GROUP_NAME=packer-build-delete-me-$RANDOM$RANDOM" >> "$GITHUB_ENV"

      - name: Build image and publish to Azure
        run: |
          packer init "$IMAGE_TEMPLATE"
          packer build \
            -var 'managed_image_name=${{ steps.set-env.outputs.image_name }}' \
            -var 'temp_resource_group_name=${{ env.TEMP_RESOURCE_GROUP_NAME }}' \
            "$IMAGE_TEMPLATE"
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_RESOURCE_GROUP: ${{ vars.ARM_RESOURCE_GROUP }}
          ARM_RESOURCE_LOCATION: ${{ vars.ARM_RESOURCE_LOCATION }}

      - name: Login to Azure CLI
        if: failure()
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

      - name: Clean up resources created by Packer if build fails
        if: failure()
        run: |
          az group delete \
            --name '${{ env.TEMP_RESOURCE_GROUP_NAME }}' \
            --force-deletion-types Microsoft.Compute/virtualMachines \
            --yes || true

  update-vmss-image:
    name: 'Update VMSS image'
    runs-on: ubuntu-latest # We don't use Elvia runner to avoid race conditions
    environment: ${{ github.event_name == 'push' && 'prod' || 'dev' }}
    needs: [generate-packer-image]
    steps:
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

      - name: Update every VMSS with new image and delete old image
        run: ./update-vmss-image.sh
        env:
          IMAGE_NAME: ${{ needs.generate-packer-image.outputs.image_name }}
          ARM_RESOURCE_GROUP: ${{ vars.ARM_RESOURCE_GROUP }}
