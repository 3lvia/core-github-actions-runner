name: Generate image

on:
  push:
    branches: [trunk]
    paths:
      - 'runner-images/**'
      - 'scripts/**'
      - '.github/workflows/generate-image.yml'
  pull_request:
    branches: [trunk]
    paths:
      - 'runner-images/**'
      - 'scripts/**'
      - '.github/workflows/generate-image.yml'
  schedule:
    - cron: '54 3 * * 2' # every Tuesday at 03:54
  workflow_dispatch:

env:
  IMAGE_PREFIX: 'elvia-runner'
  IMAGE_TEMPLATE: './runner-images/images/ubuntu/templates/ubuntu-22.04.pkr.hcl'

concurrency:
  group: 'generate-image-${{ github.event_name }}'
  cancel-in-progress: true

jobs:
  generate-packer-image:
    name: 'Generate Packer image'
    runs-on: ubuntu-latest # We don't use Elvia runner to avoid conflicts
    environment: ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
    outputs:
      image_name: ${{ steps.set-env.outputs.image_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@v3

      - name: Set environment variables and outputs
        id: set-env
        run: |
          echo "image_name=${{ env.IMAGE_PREFIX }}-$(date +%s)" >> "$GITHUB_OUTPUT"
          echo "TEMP_RESOURCE_GROUP_NAME=packer-build-delete-me-$RANDOM$RANDOM" >> "$GITHUB_ENV"

      - name: Build image and publish to Azure
        run: |
          packer init "$IMAGE_TEMPLATE"
          packer build \
            -var 'managed_image_name=${{ steps.set-env.outputs.image_name }}' \
            -var 'temp_resource_group_name=${{ env.TEMP_RESOURCE_GROUP_NAME }}' \
            "$IMAGE_TEMPLATE"
        env:
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_RESOURCE_GROUP: ${{ vars.ARM_RESOURCE_GROUP }}
          ARM_RESOURCE_LOCATION: ${{ vars.ARM_RESOURCE_LOCATION }}
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Azure CLI
        if: ${{ failure() || cancelled() }}
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

      - name: Clean up resources created by Packer if build fails or is cancelled
        if: ${{ failure() || cancelled() }}
        run: |
          az group delete \
            --name '${{ env.TEMP_RESOURCE_GROUP_NAME }}' \
            --force-deletion-types Microsoft.Compute/virtualMachines \
            --yes || true

      - name: Send Slack notification on failure
        if: ${{ failure() && github.event_name == 'push' }}
        uses: 3lvia/core-github-actions-templates/slack-message@trunk
        with:
          slack-channel: '#team-core-alerts'
          message: |
            :warning: Packer image build failed when building image ${{ steps.set-env.outputs.image_name }}
            :link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          slack-api-token: ${{ secrets.SLACK_API_TOKEN }}

  delete-old-image:
    name: 'Delete old image'
    runs-on: ubuntu-latest # We don't use Elvia runner to avoid conflicts
    environment: ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
    needs: [generate-packer-image]
    steps:
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ vars.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ vars.ARM_SUBSCRIPTION_ID }}",
              "tenantId":"${{ vars.ARM_TENANT_ID }}"
            }

      - name: Delete old image
        run: |
          old_image_ids=$(az image list --query "[?(starts_with(name, '${{ env.IMAGE_PREFIX }}') && name != '${{ needs.generate-packer-image.outputs.image_name }}')] | [].id" -o tsv)
          if [[ -z "$old_image_ids" ]]; then
            echo 'No old images found.'
            exit 0
          fi

          for old_image_id in $old_image_ids; do
            echo "Deleting old image $old_image_id..."
            az image delete \
              --output none \
              --ids "$old_image_id"
            echo 'Done.'
          done
